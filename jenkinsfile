pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node24'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/Sharad-Parit6094/nodejs-k8s-deployment-pipeline.git'
                sh 'ls -la'  // Verify files after checkout
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh ''' 
                    $SCANNER_HOME/bin/sonar-scanner \
                      -Dsonar.projectName=node.js \
                      -Dsonar.projectKey=node.js \
                      -Dsonar.sources=.
                    '''
                }
            }
        }
        stage('Quality Gate') {
            steps {
                script {
                    timeout(time: 2, unit: 'MINUTES') {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                sh '''
                cd sample-app
                ls -la  # Verify package.json exists
                if [ -f package.json ]; then
                    rm -rf node_modules package-lock.json  # Remove old dependencies
                    npm install  # Install fresh dependencies
                else
                    echo "Error: package.json not found in sample-app!"
                    exit 1
                fi
                '''
            }
        }
        stage('OWASP FS Scan') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage('Trivy FS Scan') {
            steps {
                sh 'trivy fs . > trivyfs.txt || true'
            }
        }
        stage('Trivy Image Scan') {
            steps {
                sh 'trivy image sharad9642/node.js > trivyimage.txt || true'
            }
        }

stage('Deploy to Container') {
            steps {
                sh ''' 
                echo "Stopping and removing old container..."
                docker stop sample-app || true
                docker rm node.js || true

                echo "Running new container on port 3000..."
                docker run -d --restart=always --name sample-app -p 3000:3000 sharad9642/sample-app:latest

                echo "Checking running containers..."
                docker ps -a

                echo "Fetching logs..."
                sleep 5  # Give time for the app to start
                docker logs sample-app
                '''
            }
        }
    }

stage('Trivy Image Scan') {
    steps {
        sh 'trivy image sharad9642/sample-app:latest > trivyimage.txt || true'
    }
}

        stage('Deploy to Container') {
            steps {
                sh ''' 
                echo "Stopping and removing old container..."
                docker stop sample-app || true
                docker rm sample-app || true

                echo "Running new container on port 3000..."
                docker run -d --restart=always --name sample-app -p 3000:3000 sharad9642/sample-app:latest

                echo "Checking running containers..."
                docker ps -a

                echo "Fetching logs..."
                sleep 5
                docker logs sample-app
                '''
            }
        }
    }
    post {
    always {
        script {
            if (fileExists('trivyfs.txt')) {
                emailext attachLog: true,
                    subject: "'${currentBuild.result}'",
                    body: "Project: ${env.JOB_NAME}<br/>" +
                          "Build Number: ${env.BUILD_NUMBER}<br/>" +
                          "URL: ${env.BUILD_URL}<br/>",
                    to: 'sharadparit9642@gmail.com',
                    attachmentsPattern: 'trivyfs.txt,trivyimage.txt'
            } else {
                echo "Skipping email â€” workspace missing or files not generated."
            }
        }
    }
}
